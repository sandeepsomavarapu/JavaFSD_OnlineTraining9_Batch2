
Language:
=========


		English-->communication with humans
		
Programming Languages:
=======================
				communication with machines
				
	  POP							OOPs	
	B,BCPL,C,COBOL,PHOTON	    c++,java,python,.net..Smaltalk--oopl

					1)performance --->inheritance,polymorphisam
					2)security	 --->encapsualtion,abstraction
	
1993
1996 :James gosling  jdk 1.0 

2023 				20

1.8
sun micro system --->oracle corporation



Features:
=========
		
		1)Platform Independent
		
		2)Garbage collection-- c,c++



 machine1   			machine2         machine3 
	windows 11 			windows 8		 	linux
 javaapp--->WORA

.net--microsoft -->PD


2gb-->garbage collector-->JDK


Setup,

java

JDK-->java development kit 

java -version

https://www.javatpoint.com/javafx-how-to-install-java



JVM:

javac -version   -->to know compiler version


alphabets -56,26...



java keywords
				53-->lower case 

HelloWorld


welcome to java 


		.java 

class Welcome
{

public static void main(String args[])
{

System.out.println("welcome to java");

}


}


Identifiers:
============
	any name in java will call it as identifier 

		class name,var name,methods name,obj name....


		class Welcome@123
		{
		
		
		
		}


		a-z
		A-Z
		0-9
		$
		_

Variables:
===========

		name of memory location

		syntax:
		
			datatype varname=value

				int age=30;//
				
					int age;//declaration
					
					age=21;//intialization
					
					
					welcome.java
					
					javac Welcome.java --->.class-->java Welcome  -->JVM

datatype
		2 types

		PDT 10	 51-10=41				NPDT
8 							String,array,class.....

byte	1 byte		-128 to 127
short	2 bytes		-32768 to 32767
int 	4 bytes		-2147483648	to 2147483647
long	8 bytes		-2 power 63 to (2 power 63)-1				numeric data 	 contact=7777777777;

float 	4 bytes						23.42342315793;
double	8 bytes									14-15 	decimal values

char 	2 bytes 						'M'	
boolean  1 bit 	  					true-1,false-0 




2 types of variables

	local variables		inside the method
	global variables	outside the method 
	

			global variables-->instance and static 



Instance and static:
====================

1)Syntax:
=========
	static int countryCode=91;  4 bytes
			int empId=1111;  non static 

2)Memory
========
		static variables will get memory space at the time of class loading into JVM and only once
		instance variables will get memory everytime when we create object 
		
					class --- object 
		
			TREE/CAR-->objects 
									A
									
							classname objname=new classname();	
								A  obj=new A();
			

3)Access

		static properties can be accessed by using class name 
		instance properties can be accessed by using obj name 

4)Usage
		common data to represent like country name,state name,school name,clg name....static
		
		
		unique dara to represent like contact,aadhar,pan,bank accno...instance
		


eclipse IDE


https://www.eclipse.org/downloads/packages/release/2021-03/r


			Eclipse IDE for Enterprise Java and Web Developers




Instance and static methods:
===========================

			public static void main(String[] args) {


			}


		accessmodifier instance/static returntype methodname(parameters....)
			{
			
			
			}


		public 	int	addOfTwo(int a ,int b)
		{
		
		return a+b;
		
		}
		
		if,else,for,do,while,switch....
		
		
		
OOPS:
=======
		1)Inheritance
		2)polymorphisam
		3)encapsulation
		4)abstraction
		
Inheritance:
=============extends,implements
	
				Code Reusability
		class A
		{
			
		//20 methods
		//10 variables
	
		}
		
		class B extends A
		{
		//10 methods
		
		
		}
		
	abstract/ concrete :
=======================	
		
		method with out body/implementation -->abstract
		
		
				public void add(int a,int b)
				{
				//concrete method
				}
				public abstract void sub(int a,int b);//abstract method

				
				
		class			:its a collection of only concrete methods
		abstract class	:its a combination of both abstract and concrete methods
		interface 		:its a collection of only abstract methods
				
				
		abstraction:	ATM -->	
				
					hiding the logic/internal details to the end user by show casing functionalities
				
				
				ABSTRACT CLASS	:0-100
				INTERFACE 		:100%  -->by default interface methods public abstract
				
				
INTERFACE 

ABSTRACT 


		MI not supported by java  through classes 
		MI supported by java through interfaces 



interfcae A           interfcae B
{						{


m1();					m1();


}						}

class C implements A,B
{

C c =new C();
	c.m1();


m1()
{

}
}
package --->folder
		predefined 
		user defined  package com.onlinetraining9.basic
import 



Polymorphisam:
==============
many  forms 


same action in different ways 


method overloading:method name is signature is different 

									no of params
									order of params
									type of  params
									
									
					
package com.ot9.oops;

public class MethodOverloadingEx {
	public void add(float a, float b) {
		System.out.println("add of two float's :" + (a + b));
	}

	public void add(int a, int b) {
		System.out.println("add of two int's :" + (a + b));
	}

	public void add(int a, int b, int c) {
		System.out.println("add of three int's :" + (a + b + c));
	}

	public void add(int a, float b) {
		System.out.println("add of int ,float :" + (a + b));
	}

	public void add(float a, int b) {
		System.out.println("add of two int's :" + (a + b));
	}

	public static void main(String[] args) {
		MethodOverloadingEx obj=new MethodOverloadingEx();
						obj.add(121,12);
						obj.add(12.1f,12.3f);
						obj.add(121,12.90f);
						
		
	}
}
					

Type promotion:

public class MethodOverloadingEx {
	public void add(float a, float b) {
		System.out.println("add of two float's :" + (a + b));
	}

	public void add(int a, int b) {
		System.out.println("add of two int's :" + (a + b));
	}

	public void add(int a, int b, int c) {
		System.out.println("add of three int's :" + (a + b + c));
	}

	public static void main(String[] args) {
		MethodOverloadingEx obj = new MethodOverloadingEx();
		obj.add(121, 12);
		obj.add(12.1f, 12.3f);
		obj.add(121, 12.90f);
		obj.add('a', 'b');//type promotion

	}
}


method overriding :
===================
method name is same implementation is different




public :every where 

private :class level scope

protected:inside the package everywhere  otuside the package only in child

default:	pacakge level scope



NOTE:
	1)by default super class for every java class is java.lang.Object
	2)by default package for every java file java.lang



	import


Encpasulation:
===============
process of bidning the data and methods together 


		data --->private 
		methods -->public 





















