
Language:
=========


		English-->communication with humans
		
Programming Languages:
=======================
				communication with machines
				
	  POP							OOPs	
	B,BCPL,C,COBOL,PHOTON	    c++,java,python,.net..Smaltalk--oopl

					1)performance --->inheritance,polymorphisam
					2)security	 --->encapsualtion,abstraction
	
1993
1996 :James gosling  jdk 1.0 

2023 				20

1.8
sun micro system --->oracle corporation



Features:
=========
		
		1)Platform Independent
		
		2)Garbage collection-- c,c++



 machine1   			machine2         machine3 
	windows 11 			windows 8		 	linux
 javaapp--->WORA

.net--microsoft -->PD


2gb-->garbage collector-->JDK


Setup,

java

JDK-->java development kit 

java -version

https://www.javatpoint.com/javafx-how-to-install-java



JVM:

javac -version   -->to know compiler version


alphabets -56,26...



java keywords
				53-->lower case 

HelloWorld


welcome to java 


		.java 

class Welcome
{

public static void main(String args[])
{

System.out.println("welcome to java");

}


}


Identifiers:
============
	any name in java will call it as identifier 

		class name,var name,methods name,obj name....


		class Welcome@123
		{
		
		
		
		}


		a-z
		A-Z
		0-9
		$
		_

Variables:
===========

		name of memory location

		syntax:
		
			datatype varname=value

				int age=30;//
				
					int age;//declaration
					
					age=21;//intialization
					
					
					welcome.java
					
					javac Welcome.java --->.class-->java Welcome  -->JVM

datatype
		2 types

		PDT 10	 51-10=41				NPDT
8 							String,array,class.....

byte	1 byte		-128 to 127
short	2 bytes		-32768 to 32767
int 	4 bytes		-2147483648	to 2147483647
long	8 bytes		-2 power 63 to (2 power 63)-1				numeric data 	 contact=7777777777;

float 	4 bytes						23.42342315793;
double	8 bytes									14-15 	decimal values

char 	2 bytes 						'M'	
boolean  1 bit 	  					true-1,false-0 




2 types of variables

	local variables		inside the method
	global variables	outside the method 
	

			global variables-->instance and static 



Instance and static:
====================

1)Syntax:
=========
	static int countryCode=91;  4 bytes
			int empId=1111;  non static 

2)Memory
========
		static variables will get memory space at the time of class loading into JVM and only once
		instance variables will get memory everytime when we create object 
		
					class --- object 
		
			TREE/CAR-->objects 
									A
									
							classname objname=new classname();	
								A  obj=new A();
			

3)Access

		static properties can be accessed by using class name 
		instance properties can be accessed by using obj name 

4)Usage
		common data to represent like country name,state name,school name,clg name....static
		
		
		unique dara to represent like contact,aadhar,pan,bank accno...instance
		


eclipse IDE


https://www.eclipse.org/downloads/packages/release/2021-03/r


			Eclipse IDE for Enterprise Java and Web Developers




Instance and static methods:
===========================

			public static void main(String[] args) {


			}


		accessmodifier instance/static returntype methodname(parameters....)
			{
			
			
			}


		public 	int	addOfTwo(int a ,int b)
		{
		
		return a+b;
		
		}
		
		if,else,for,do,while,switch....
		
		
		
OOPS:
=======
		1)Inheritance
		2)polymorphisam
		3)encapsulation
		4)abstraction
		
Inheritance:
=============extends,implements
	
				Code Reusability
		class A
		{
			
		//20 methods
		//10 variables
	
		}
		
		class B extends A
		{
		//10 methods
		
		
		}
		
	abstract/ concrete :
=======================	
		
		method with out body/implementation -->abstract
		
		
				public void add(int a,int b)
				{
				//concrete method
				}
				public abstract void sub(int a,int b);//abstract method

				
				
		class			:its a collection of only concrete methods
		abstract class	:its a combination of both abstract and concrete methods
		interface 		:its a collection of only abstract methods
				
				
		abstraction:	ATM -->	
				
					hiding the logic/internal details to the end user by show casing functionalities
				
				
				ABSTRACT CLASS	:0-100
				INTERFACE 		:100%  -->by default interface methods public abstract
				
				
INTERFACE 

ABSTRACT 


		MI not supported by java  through classes 
		MI supported by java through interfaces 



interfcae A           interfcae B
{						{


m1();					m1();


}						}

class C implements A,B
{

C c =new C();
	c.m1();


m1()
{

}
}
package --->folder
		predefined 
		user defined  package com.onlinetraining9.basic
import 



Polymorphisam:
==============
many  forms 


same action in different ways 


method overloading:method name is signature is different 

									no of params
									order of params
									type of  params
									
									
					
package com.ot9.oops;

public class MethodOverloadingEx {
	public void add(float a, float b) {
		System.out.println("add of two float's :" + (a + b));
	}

	public void add(int a, int b) {
		System.out.println("add of two int's :" + (a + b));
	}

	public void add(int a, int b, int c) {
		System.out.println("add of three int's :" + (a + b + c));
	}

	public void add(int a, float b) {
		System.out.println("add of int ,float :" + (a + b));
	}

	public void add(float a, int b) {
		System.out.println("add of two int's :" + (a + b));
	}

	public static void main(String[] args) {
		MethodOverloadingEx obj=new MethodOverloadingEx();
						obj.add(121,12);
						obj.add(12.1f,12.3f);
						obj.add(121,12.90f);
						
		
	}
}
					

Type promotion:

public class MethodOverloadingEx {
	public void add(float a, float b) {
		System.out.println("add of two float's :" + (a + b));
	}

	public void add(int a, int b) {
		System.out.println("add of two int's :" + (a + b));
	}

	public void add(int a, int b, int c) {
		System.out.println("add of three int's :" + (a + b + c));
	}

	public static void main(String[] args) {
		MethodOverloadingEx obj = new MethodOverloadingEx();
		obj.add(121, 12);
		obj.add(12.1f, 12.3f);
		obj.add(121, 12.90f);
		obj.add('a', 'b');//type promotion

	}
}


method overriding :
===================
method name is same implementation is different




public :every where 

private :class level scope

protected:inside the package everywhere  otuside the package only in child

default:	pacakge level scope



NOTE:
	1)by default super class for every java class is java.lang.Object
	2)by default package for every java file java.lang



	import


Encpasulation:
===============
process of bidning the data and methods together 


		data --->private 
		methods -->public 




String,StringBuffer,StringBuilder:	 java.lang 
==================================

		group of characters ---


String -->imuttable

String literal 				""
String new keyword			new String("")


SCP

StringBuffer,StringBuilder -->muttable

not synchronized  /synchronized

Exception Handling :
====================
JVM/system defined error messages 


	SYSTEM DEFINED ERROR MESSAGES
	ABNORMAL TERMINATION


Multi Threading:
===============

multi tasking:
		executing several tasks simultaniously 
		


	Process based multi tasking 
	
			executing several tasks simultaniously where each task is seprate independent process .
					
					ex:eclipse,excel,calculator,teams
			
			
	Thread Based Multi tasking
	
					executing several tasks simultaniously where EVERY task belongs TO the SAME PROCESS.

			multi threading
	

2 ways   java.lang 

	implements Runnable(I)  SAM   run()
	extends Thread 	(C)


class MyThread implements Runnable

{

	run()
	{
	
	
	}
Thread
		start()

}

https://www.javamadesoeasy.com/2015/03/thread-states-thread-life-cycle-in-java.html


synchronization:


synchronized

	public synchronized void m1()
	{
	
	
	}
										t1,t2,t3
										
	public  void m2()
	{
	
	
	}




Inter thread communication:


	communication between threads 
	
	
	wait notify notifyAll  

			odd--->1,3,5,7,9....		
			even --->2,4,6,8,10... waiting--->wait()--->notify



Collection Framework:
=====================

	int marks=300;

		marks=400;


	arrays
		multiple values 
		
		int marks[]={230,240,250,260} -->index 0,1,2,3
		
		marks[0]

		1)only homogeneous data 
		2)fixed in size 		 AIOE
		3)no utility methods


	Advantages of collections:
		
		
		1)both homogeneous and haterogeneous data is allowed 
		2)not fixed in size , growable in nature 
		3)lots utility methods

		List
		1)Duplicates are allowed 
		2)insertion order is preserved 



java.lang.Comparable -->NSO-->SAM-->FI-->compareTo
java.util.Comparator -->CSO-->SAM-->FI-->compare

		System.out.println("suresh".compareTo("akash"));
			
			//returns -ve if obj1 has to come before obj2
			//returns +ve if obj1 has to come after obj2
			//returns 0 if both are same



Case study:
===========

ProductManagement Application:
==============================
	
1)add product
2)update product
3)delete product
4)get product by id
5)getall products
6)getall products by price range
7)get all products by category
8)exit




Bank Case study:
===============


**********************Welcome to Imaginary Bank**********************



Please enter a number to select one of the following options:
1. Create Account
2. Show Balance
3. Make a Deposit
4. Make a Withdrawal
5. Fund Transfer Within the Bank
6. Print Transactions for an Account Number
7. Exit
	
	
Database:
=========

oracle,mysql,db2,postgres....

mongodb....



MYSQL

https://dev.mysql.com/downloads/installer/


		tables -->rows +columns


DDL -->create,alter,drop,truncate,rename
DML -->insert,update,delete
DRL -->select


create database onlinetraining;
use onlinetraining;
create table employees(eid int,ename varchar(10),esal int,eadd varchar(10));
alter table emps add designation varchar(10);
describe emps;
alter table emps drop designation ;
alter table emps change eid empno int;
alter table emps rename employees;
truncate table employees;
drop table employees;
insert into employees values(123,"mahesh",20000,"hyderabad");
insert into employees values(124,"naresh",40000,"banglore");
insert into employees values(125,"rajesh",50000,"hyderabad");
insert into employees values(126,"somesh",30000,"delhi");
insert into employees values(127,"suresh",35000,"banglore");
insert into employees values(128,"hitesh",45000,"delhi");
insert into employees(eid,ename) values(168,"sandeep");
select * from employees;
select eid,ename from employees;
update employees set esal=esal+5000 where eadd="hyderabad";
update employees set esal=esal+1000;
delete from employees where esal>45000;
select * from employees;
select * from employees where eadd="delhi";
select max(esal) from employees;
select min(esal) from employees;
select avg(esal) from employees;
select sum(esal) from employees;
select count(esal) from employees;

#unique,notnull,PK,check,FK

create table emps(eid int primary key,ename varchar(10),esal int,eadd varchar(10));

insert into emps values(123,"mahesh",20000,"hyderabad");
insert into emps values(124,"naresh",40000,"banglore");


JDBC:Java Database Connectivity



		java<---->Database-->username ,password,url,driver class



JDBC API

5 steps 

loading the driver class


creating the connection


creating the statement
	
executing the querys

close the connection




JPA--->sun micro system-->specification


implementations of JPA
		
		ORM Tools-->hibernate,eclipselink,toplink,ibatis.....
	


no querys

no table creation

no exceptions

no boilerplate code 



ORM


table-->class

rows--->objects

columns-->variables



@Enitity
@Table
class Employee		-->table
{
@Id
@GeneratedValue
@Column
private int empId;// columns
private String empName;//



}

Client
{

	EntityManagerFactory emf=Persistence.createEntityManagerFactory();
	EntityManager entityManager
	
	//persist()-->insert,merge()-->update,remove()-->delete,find() -->select
	//createQuery()->JPQL,getTransaction(),begin(),commit(),executeUpdate(),getResultList(),getSingleResult()
}

META-INF
persistence.xml

<persistence>

<persistence-unit>
<property >
<!--database properties-->
<!-- hibernate properties>


JPQL:-->querys-->database independent querys























